#!/usr/bin/env ruby
require 'bundler/setup'
require 'webrick'
require 'optparse'

require 'sg/ext'
using SG::Ext

port = 8899
serving = []
files = []
title = File.basename(Dir.pwd)
cache_control = 'must-revalidate, max-age=300'

args = OptionParser.new do |o|
  o.on('--port INTEGER') do |n|
    port = n.to_i
  end
  o.on('-d', '--dir path:resource') do |v|
    path, resource = v.split(':')
    resource ||= File.basename(path)
    serving << [ path, resource ]
  end
  o.on('-f', '--file path:resource') do |v|
    path, resource = v.split(':')
    resource ||= File.basename(path)
    serving << [ path, resource ]
  end
  o.on('-t', '--title TITLE') do |v|
    title = v
  end
end.parse(ARGV)

if serving.empty?
  # [ local, hosted ]
  serving = [ [ Dir.pwd + '/doc/api', 'api' ],
              [ Dir.pwd + '/doc/coverage', 'coverage' ],
              [ Dir.pwd + '/doc/spec.html', 'spec.html' ]
            ]
end

def link_to href, label = nil
  "<a href=\"%s\">%s</a>" % [ href, label || href ]
end
  
server = WEBrick::HTTPServer.new(Port: port)
server.mount_proc('/') do |req, resp|
  resp.status = 200
  resp['Cache-Control'] = cache_control
  resp.body = [ '<html>',
                '<title>', title, '</title>',
                '<body>',
                '<h1>', title, '</h1>',
                '<ul>',
                serving.sort_by(&:second).
                collect do |(path, resource)|
                  href = resource.end_with?('/') ? resource : resource + '/'
                  '<li>%s</li>' % [ link_to(href, resource) ]
                end,
                '</ul></body></html>'
                ].flatten.join
end

class CustomHeadersProxy < WEBrick::HTTPServlet::AbstractServlet
  def initialize server, headers, inst, *a, **o, &b
    super(server, *a, **o)
    @inst = inst.new(server, *a, **o, &b)
    @custom_headers = headers
  end

  %w{ GET HEAD POST PUT DELETE }.each do |meth|
    class_eval <<-EOT
      def do_#{meth} request, response
        @inst.do_#{meth}(request, response)
        @custom_headers.each do |name, value|
          response[name] = value
        end
      end
EOT
  end
end

serving.each do |(path, resource)|
  resource = '/' + resource unless resource.start_with?('/')
  if File.directory?(path)
    server.mount(resource, CustomHeadersProxy,
                 { 'Cache-Control' => cache_control },
                 WEBrick::HTTPServlet::FileHandler,
                 path, FancyIndexing: true)
  else
    server.mount(resource, CustomHeadersProxy,
                 { 'Cache-Control' => cache_control },
                 WEBrick::HTTPServlet::DefaultFileHandler, path)
  end
end

trap('INT') do
  server.stop
end

server.start
